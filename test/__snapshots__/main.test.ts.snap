// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "Asterisk9C1C74F33aa50d24dc37cbc0": Object {
      "CreationPolicy": Object {
        "ResourceSignal": Object {
          "Count": 1,
          "Timeout": "PT15M",
        },
      },
      "DependsOn": Array [
        "ec2RoleDefaultPolicyC400AE24",
        "ec2Role38AB65C0",
      ],
      "Metadata": Object {
        "AWS::CloudFormation::Init": Object {
          "config": Object {
            "commands": Object {
              "000": Object {
                "command": "chmod +x /etc/config_asterisk.sh",
              },
              "001": Object {
                "command": "/etc/config_asterisk.sh 2>&1 | tee /var/log/asterisk_config.log",
              },
            },
            "files": Object {
              "/etc/asterisk/asterisk.conf": Object {
                "content": "[options]
runuser = asterisk
rungroup = asterisk",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/asterisk/logger.conf": Object {
                "content": "[general]
[logfiles]
console = verbose,notice,warning,error
messages = notice,warning,error",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/asterisk/modules.conf": Object {
                "content": "[modules]
autoload = no

; Applications

load = app_bridgewait.so
load = app_dial.so
load = app_playback.so
load = app_stack.so
load = app_verbose.so
load = app_voicemail.so
load = app_directory.so
load = app_confbridge.so
load = app_queue.so
load = app_echo.so

; Bridging

load = bridge_builtin_features.so
load = bridge_builtin_interval_features.so
load = bridge_holding.so
load = bridge_native_rtp.so
load = bridge_simple.so
load = bridge_softmix.so

; Call Detail Records

load = cdr_custom.so

; Channel Drivers

load = chan_bridge_media.so
load = chan_pjsip.so

; Codecs

load = codec_gsm.so
load = codec_resample.so
load = codec_ulaw.so
load = codec_g722.so

; Formats

load = format_gsm.so
load = format_pcm.so
load = format_wav_gsm.so
load = format_wav.so

; Functions

load = func_callerid.so
load = func_cdr.so
load = func_pjsip_endpoint.so
load = func_sorcery.so
load = func_devstate.so
load = func_strings.so

; Core/PBX

load = pbx_config.so

; Resources

load = res_http_websocket.so
load = res_musiconhold.so
load = res_pjproject.so
load = res_pjsip_acl.so
load = res_pjsip_authenticator_digest.so
load = res_pjsip_caller_id.so
load = res_pjsip_dialog_info_body_generator.so
load = res_pjsip_diversion.so
load = res_pjsip_dtmf_info.so
load = res_pjsip_endpoint_identifier_anonymous.so
load = res_pjsip_endpoint_identifier_ip.so
load = res_pjsip_endpoint_identifier_user.so
load = res_pjsip_exten_state.so
load = res_pjsip_header_funcs.so
load = res_pjsip_logger.so
load = res_pjsip_messaging.so
load = res_pjsip_mwi_body_generator.so
load = res_pjsip_mwi.so
load = res_pjsip_nat.so
load = res_pjsip_notify.so
load = res_pjsip_one_touch_record_info.so
load = res_pjsip_outbound_authenticator_digest.so
load = res_pjsip_outbound_publish.so
load = res_pjsip_outbound_registration.so
load = res_pjsip_path.so
load = res_pjsip_pidf_body_generator.so
load = res_pjsip_pidf_digium_body_supplement.so
load = res_pjsip_pidf_eyebeam_body_supplement.so
load = res_pjsip_publish_asterisk.so
load = res_pjsip_pubsub.so
load = res_pjsip_refer.so
load = res_pjsip_registrar.so
load = res_pjsip_rfc3326.so
load = res_pjsip_sdp_rtp.so
load = res_pjsip_send_to_voicemail.so
load = res_pjsip_session.so
load = res_pjsip.so
load = res_pjsip_t38.so
load = res_pjsip_transport_websocket.so
load = res_pjsip_xpidf_body_generator.so
load = res_rtp_asterisk.so
load = res_sorcery_astdb.so
load = res_sorcery_config.so
load = res_sorcery_memory.so
load = res_sorcery_realtime.so
load = res_timing_timerfd.so

; Do not load res_hep and kin unless you are using HEP monitoring
; <http://sipcapture.org> in your network.

noload = res_hep.so
noload = res_hep_pjsip.so
noload = res_hep_rtcp.so",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/asterisk/pjsip.conf": Object {
                "content": "[udp]
type=transport
protocol=udp
bind=0.0.0.0
external_media_address=IP_ADDRESS
external_signaling_address=IP_ADDRESS
allow_reload=yes

[SIPTrunk]
type=endpoint
context=from-SIPTrunk
transport=udp
disallow=all
allow=ulaw
aors=SIPTrunk
direct_media=no
ice_support=yes
force_rport=yes

[SIPTrunk]
type=identify
endpoint=SIPTrunk
match=SIP_TRUNK_SOURCE

[SIPTrunk]
type=aor
contact=sip:SIP_TRUNK_SOURCE

",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/config_asterisk.sh": Object {
                "content": "#!/bin/bash -xe
IP=$( jq -r '.IP' /etc/config.json )

sed -i \\"s/IP_ADDRESS/$IP/g\\" /etc/asterisk/pjsip.conf

groupadd asterisk
useradd -r -d /var/lib/asterisk -g asterisk asterisk
usermod -aG audio,dialout asterisk
chown -R asterisk.asterisk /etc/asterisk
chown -R asterisk.asterisk /var/{lib,log,spool}/asterisk

systemctl start asterisk",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
          },
          "configSets": Object {
            "default": Array [
              "install",
              "config",
            ],
          },
          "install": Object {
            "commands": Object {
              "000": Object {
                "command": "chmod +x /etc/install.sh",
              },
              "001": Object {
                "command": "cd /tmp",
              },
              "002": Object {
                "command": "/etc/install.sh 2>&1 | tee /var/log/asterisk_install.log",
              },
            },
            "files": Object {
              "/etc/config.json": Object {
                "content": Object {
                  "IP": Object {
                    "Ref": "ec2Eip",
                  },
                },
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/install.sh": Object {
                "content": "#!/bin/bash -xe
## Copyright Amazon.com Inc. or its affiliates.
HOMEDIR=/home/ec2-user
cd /tmp
yum -y install make gcc gcc-c++ make subversion libxml2-devel ncurses-devel openssl-devel vim-enhanced man glibc-devel autoconf libnewt kernel-devel kernel-headers linux-headers openssl-devel zlib-devel libsrtp libsrtp-devel uuid libuuid-devel mariadb-server jansson-devel libsqlite3x libsqlite3x-devel epel-release.noarch bash-completion bash-completion-extras unixODBC unixODBC-devel libtool-ltdl libtool-ltdl-devel mysql-connector-odbc mlocate libiodbc sqlite sqlite-devel sql-devel.i686 sqlite-doc.noarch sqlite-tcl.x86_64 patch libedit-devel jq
yum -y install amazon-cloudwatch-agent
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/tmp/amazon-cloudwatch-agent.json
wget https://downloads.asterisk.org/pub/telephony/asterisk/asterisk-18-current.tar.gz
tar xvzf asterisk-18-current.tar.gz 
cd asterisk-18*/
./configure --libdir=/usr/lib64 --with-jansson-bundled
make menuselect.makeopts
menuselect/menuselect \\\\
        --disable BUILD_NATIVE \\\\
        --disable chan_sip \\\\
        --disable chan_skinny \\\\
        --enable cdr_csv \\\\
        --enable res_snmp \\\\
        --enable res_http_websocket \\\\
        menuselect.makeopts
make 
make install
make basic-pbx
touch /etc/redhat-release
make config
ldconfig
",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/tmp/amazon-cloudwatch-agent.json": Object {
                "content": "{
	\\"agent\\": {
		\\"run_as_user\\": \\"root\\"
	},
	\\"logs\\": {
		\\"logs_collected\\": {
			\\"files\\": {
				\\"collect_list\\": [
					{
						\\"file_path\\": \\"/var/log/asterisk_install.log\\",
						\\"log_group_name\\": \\"/var/log/amazon-chime-sdk-lex/\\",
						\\"log_stream_name\\": \\"{instance_id}-install\\",
						\\"retention_in_days\\": 7
					},
					{
						\\"file_path\\": \\"/var/log/asterisk/messages\\",
						\\"log_group_name\\": \\"/var/log/amazon-chime-sdk-lex/\\",
						\\"log_stream_name\\": \\"{instance_id}-messages\\",
						\\"retention_in_days\\": 7
					},
					{
						\\"file_path\\": \\"/var/log/asterisk_config.log\\",
						\\"log_group_name\\": \\"/var/log/amazon-chime-sdk-lex/\\",
						\\"log_stream_name\\": \\"{instance_id}-config\\",
						\\"retention_in_days\\": 7
					}
				]
			}
		}
	}
}",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
          },
        },
      },
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "IamInstanceProfile": Object {
          "Ref": "AsteriskInstanceProfileB0C58003",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t4g.micro",
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "AsteriskInstanceSecurityGroup4F4C02EA",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VPCAsteriskSubnetSubnet1Subnet954388CC",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Asterisk",
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
# fingerprint: 6ddce5a6aa70381e
(
  set +e
  /opt/aws/bin/cfn-init -v --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource Asterisk9C1C74F33aa50d24dc37cbc0 -c default
  /opt/aws/bin/cfn-signal -e $? --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource Asterisk9C1C74F33aa50d24dc37cbc0
  cat /var/log/cfn-init.log >&2
)",
              ],
            ],
          },
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "AsteriskInstanceProfileB0C58003": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ec2Role38AB65C0",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "AsteriskInstanceSecurityGroup4F4C02EA": Object {
      "Properties": Object {
        "GroupDescription": "test/Asterisk/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Asterisk",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "EIPAssociation": Object {
      "Properties": Object {
        "EIP": Object {
          "Ref": "ec2Eip",
        },
        "InstanceId": Object {
          "Ref": "Asterisk9C1C74F33aa50d24dc37cbc0",
        },
      },
      "Type": "AWS::EC2::EIPAssociation",
    },
    "VPCAsteriskSubnetSubnet1DefaultRouteD32F1A12": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCAsteriskSubnetSubnet1RouteTable21B65320",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCAsteriskSubnetSubnet1RouteTable21B65320": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/AsteriskSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCAsteriskSubnetSubnet1RouteTableAssociation4FA1C975": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCAsteriskSubnetSubnet1RouteTable21B65320",
        },
        "SubnetId": Object {
          "Ref": "VPCAsteriskSubnetSubnet1Subnet954388CC",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCAsteriskSubnetSubnet1Subnet954388CC": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "AsteriskSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/AsteriskSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCB9E5F0B4": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Asterisk VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Asterisk VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCVPCGW99B986DC": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "ec2Eip": Object {
      "Type": "AWS::EC2::EIP",
    },
    "ec2Role38AB65C0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "cloudwatchLogs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ec2RoleDefaultPolicyC400AE24": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AWS::StackId",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ec2RoleDefaultPolicyC400AE24",
        "Roles": Array [
          Object {
            "Ref": "ec2Role38AB65C0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Snapshot 2`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "Asterisk9C1C74F33aa50d24dc37cbc0": Object {
      "CreationPolicy": Object {
        "ResourceSignal": Object {
          "Count": 1,
          "Timeout": "PT15M",
        },
      },
      "DependsOn": Array [
        "ec2RoleDefaultPolicyC400AE24",
        "ec2Role38AB65C0",
      ],
      "Metadata": Object {
        "AWS::CloudFormation::Init": Object {
          "config": Object {
            "commands": Object {
              "000": Object {
                "command": "chmod +x /etc/config_asterisk.sh",
              },
              "001": Object {
                "command": "/etc/config_asterisk.sh 2>&1 | tee /var/log/asterisk_config.log",
              },
            },
            "files": Object {
              "/etc/asterisk/asterisk.conf": Object {
                "content": "[options]
runuser = asterisk
rungroup = asterisk",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/asterisk/logger.conf": Object {
                "content": "[general]
[logfiles]
console = verbose,notice,warning,error
messages = notice,warning,error",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/asterisk/modules.conf": Object {
                "content": "[modules]
autoload = no

; Applications

load = app_bridgewait.so
load = app_dial.so
load = app_playback.so
load = app_stack.so
load = app_verbose.so
load = app_voicemail.so
load = app_directory.so
load = app_confbridge.so
load = app_queue.so
load = app_echo.so

; Bridging

load = bridge_builtin_features.so
load = bridge_builtin_interval_features.so
load = bridge_holding.so
load = bridge_native_rtp.so
load = bridge_simple.so
load = bridge_softmix.so

; Call Detail Records

load = cdr_custom.so

; Channel Drivers

load = chan_bridge_media.so
load = chan_pjsip.so

; Codecs

load = codec_gsm.so
load = codec_resample.so
load = codec_ulaw.so
load = codec_g722.so

; Formats

load = format_gsm.so
load = format_pcm.so
load = format_wav_gsm.so
load = format_wav.so

; Functions

load = func_callerid.so
load = func_cdr.so
load = func_pjsip_endpoint.so
load = func_sorcery.so
load = func_devstate.so
load = func_strings.so

; Core/PBX

load = pbx_config.so

; Resources

load = res_http_websocket.so
load = res_musiconhold.so
load = res_pjproject.so
load = res_pjsip_acl.so
load = res_pjsip_authenticator_digest.so
load = res_pjsip_caller_id.so
load = res_pjsip_dialog_info_body_generator.so
load = res_pjsip_diversion.so
load = res_pjsip_dtmf_info.so
load = res_pjsip_endpoint_identifier_anonymous.so
load = res_pjsip_endpoint_identifier_ip.so
load = res_pjsip_endpoint_identifier_user.so
load = res_pjsip_exten_state.so
load = res_pjsip_header_funcs.so
load = res_pjsip_logger.so
load = res_pjsip_messaging.so
load = res_pjsip_mwi_body_generator.so
load = res_pjsip_mwi.so
load = res_pjsip_nat.so
load = res_pjsip_notify.so
load = res_pjsip_one_touch_record_info.so
load = res_pjsip_outbound_authenticator_digest.so
load = res_pjsip_outbound_publish.so
load = res_pjsip_outbound_registration.so
load = res_pjsip_path.so
load = res_pjsip_pidf_body_generator.so
load = res_pjsip_pidf_digium_body_supplement.so
load = res_pjsip_pidf_eyebeam_body_supplement.so
load = res_pjsip_publish_asterisk.so
load = res_pjsip_pubsub.so
load = res_pjsip_refer.so
load = res_pjsip_registrar.so
load = res_pjsip_rfc3326.so
load = res_pjsip_sdp_rtp.so
load = res_pjsip_send_to_voicemail.so
load = res_pjsip_session.so
load = res_pjsip.so
load = res_pjsip_t38.so
load = res_pjsip_transport_websocket.so
load = res_pjsip_xpidf_body_generator.so
load = res_rtp_asterisk.so
load = res_sorcery_astdb.so
load = res_sorcery_config.so
load = res_sorcery_memory.so
load = res_sorcery_realtime.so
load = res_timing_timerfd.so

; Do not load res_hep and kin unless you are using HEP monitoring
; <http://sipcapture.org> in your network.

noload = res_hep.so
noload = res_hep_pjsip.so
noload = res_hep_rtcp.so",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/asterisk/pjsip.conf": Object {
                "content": "[udp]
type=transport
protocol=udp
bind=0.0.0.0
external_media_address=IP_ADDRESS
external_signaling_address=IP_ADDRESS
allow_reload=yes

[SIPTrunk]
type=endpoint
context=from-SIPTrunk
transport=udp
disallow=all
allow=ulaw
aors=SIPTrunk
direct_media=no
ice_support=yes
force_rport=yes

[SIPTrunk]
type=identify
endpoint=SIPTrunk
match=SIP_TRUNK_SOURCE

[SIPTrunk]
type=aor
contact=sip:SIP_TRUNK_SOURCE

",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/config_asterisk.sh": Object {
                "content": "#!/bin/bash -xe
IP=$( jq -r '.IP' /etc/config.json )

sed -i \\"s/IP_ADDRESS/$IP/g\\" /etc/asterisk/pjsip.conf

groupadd asterisk
useradd -r -d /var/lib/asterisk -g asterisk asterisk
usermod -aG audio,dialout asterisk
chown -R asterisk.asterisk /etc/asterisk
chown -R asterisk.asterisk /var/{lib,log,spool}/asterisk

systemctl start asterisk",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
          },
          "configSets": Object {
            "default": Array [
              "install",
              "config",
            ],
          },
          "install": Object {
            "commands": Object {
              "000": Object {
                "command": "chmod +x /etc/install.sh",
              },
              "001": Object {
                "command": "cd /tmp",
              },
              "002": Object {
                "command": "/etc/install.sh 2>&1 | tee /var/log/asterisk_install.log",
              },
            },
            "files": Object {
              "/etc/config.json": Object {
                "content": Object {
                  "IP": Object {
                    "Ref": "ec2Eip",
                  },
                },
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/etc/install.sh": Object {
                "content": "#!/bin/bash -xe
## Copyright Amazon.com Inc. or its affiliates.
HOMEDIR=/home/ec2-user
cd /tmp
yum -y install make gcc gcc-c++ make subversion libxml2-devel ncurses-devel openssl-devel vim-enhanced man glibc-devel autoconf libnewt kernel-devel kernel-headers linux-headers openssl-devel zlib-devel libsrtp libsrtp-devel uuid libuuid-devel mariadb-server jansson-devel libsqlite3x libsqlite3x-devel epel-release.noarch bash-completion bash-completion-extras unixODBC unixODBC-devel libtool-ltdl libtool-ltdl-devel mysql-connector-odbc mlocate libiodbc sqlite sqlite-devel sql-devel.i686 sqlite-doc.noarch sqlite-tcl.x86_64 patch libedit-devel jq
yum -y install amazon-cloudwatch-agent
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/tmp/amazon-cloudwatch-agent.json
wget https://downloads.asterisk.org/pub/telephony/asterisk/asterisk-18-current.tar.gz
tar xvzf asterisk-18-current.tar.gz 
cd asterisk-18*/
./configure --libdir=/usr/lib64 --with-jansson-bundled
make menuselect.makeopts
menuselect/menuselect \\\\
        --disable BUILD_NATIVE \\\\
        --disable chan_sip \\\\
        --disable chan_skinny \\\\
        --enable cdr_csv \\\\
        --enable res_snmp \\\\
        --enable res_http_websocket \\\\
        menuselect.makeopts
make 
make install
make basic-pbx
touch /etc/redhat-release
make config
ldconfig
",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
              "/tmp/amazon-cloudwatch-agent.json": Object {
                "content": "{
	\\"agent\\": {
		\\"run_as_user\\": \\"root\\"
	},
	\\"logs\\": {
		\\"logs_collected\\": {
			\\"files\\": {
				\\"collect_list\\": [
					{
						\\"file_path\\": \\"/var/log/asterisk_install.log\\",
						\\"log_group_name\\": \\"/var/log/amazon-chime-sdk-lex/\\",
						\\"log_stream_name\\": \\"{instance_id}-install\\",
						\\"retention_in_days\\": 7
					},
					{
						\\"file_path\\": \\"/var/log/asterisk/messages\\",
						\\"log_group_name\\": \\"/var/log/amazon-chime-sdk-lex/\\",
						\\"log_stream_name\\": \\"{instance_id}-messages\\",
						\\"retention_in_days\\": 7
					},
					{
						\\"file_path\\": \\"/var/log/asterisk_config.log\\",
						\\"log_group_name\\": \\"/var/log/amazon-chime-sdk-lex/\\",
						\\"log_stream_name\\": \\"{instance_id}-config\\",
						\\"retention_in_days\\": 7
					}
				]
			}
		}
	}
}",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
          },
        },
      },
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": Object {
          "Ref": "AsteriskInstanceProfileB0C58003",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t4g.micro",
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "AsteriskInstanceSecurityGroup4F4C02EA",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "s-12345",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "DefinedVPC/Asterisk",
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
# fingerprint: 6ddce5a6aa70381e
(
  set +e
  /opt/aws/bin/cfn-init -v --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource Asterisk9C1C74F33aa50d24dc37cbc0 -c default
  /opt/aws/bin/cfn-signal -e $? --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource Asterisk9C1C74F33aa50d24dc37cbc0
  cat /var/log/cfn-init.log >&2
)",
              ],
            ],
          },
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "AsteriskInstanceProfileB0C58003": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ec2Role38AB65C0",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "AsteriskInstanceSecurityGroup4F4C02EA": Object {
      "Properties": Object {
        "GroupDescription": "DefinedVPC/Asterisk/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "DefinedVPC/Asterisk",
          },
        ],
        "VpcId": "vpc-12345",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "EIPAssociation": Object {
      "Properties": Object {
        "EIP": Object {
          "Ref": "ec2Eip",
        },
        "InstanceId": Object {
          "Ref": "Asterisk9C1C74F33aa50d24dc37cbc0",
        },
      },
      "Type": "AWS::EC2::EIPAssociation",
    },
    "ec2Eip": Object {
      "Type": "AWS::EC2::EIP",
    },
    "ec2Role38AB65C0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "cloudwatchLogs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ec2RoleDefaultPolicyC400AE24": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AWS::StackId",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ec2RoleDefaultPolicyC400AE24",
        "Roles": Array [
          Object {
            "Ref": "ec2Role38AB65C0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
